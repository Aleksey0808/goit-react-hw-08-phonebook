{"version":3,"file":"static/js/19.70793e7b.chunk.js","mappings":"sQAGAA,EAAAA,EAAAA,SAAAA,QAAyB,wCAEzB,IAAMC,EAAQ,SACRA,GACFD,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAA,iBAAwDC,EACzD,EAHGA,EAAQ,WAKVD,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAA8C,EAC/C,EAQGE,GAAWC,EAAAA,EAAAA,IAAiB,gBAAD,mCAAkB,WAAMC,GAAN,kGAExBJ,EAAAA,EAAAA,KAAW,gBAAiBI,GAFJ,uBAEvCC,EAFuC,EAEvCA,KACRJ,EAAUI,EAAKJ,OAHgC,kBAIxCI,GAJwC,yFAAlB,uDAe3BC,GAAQH,EAAAA,EAAAA,IAAiB,aAAD,mCAAe,WAAMC,GAAN,kGAElBJ,EAAAA,EAAAA,KAAW,eAAgBI,GAFT,uBAEjCC,EAFiC,EAEjCA,KACRJ,EAAUI,EAAKJ,OAH0B,kBAIlCI,GAJkC,yFAAf,uDAexBE,GAASJ,EAAAA,EAAAA,IAAiB,eAAD,iBAAgB,uGAErCH,EAAAA,EAAAA,KAAW,iBAF0B,OAG3CC,IAH2C,wGAiBzCO,GAAmBL,EAAAA,EAAAA,IACvB,eADuC,mCAEvC,WAAOM,EAAGC,GAAV,gFACQC,EAAQD,EAASE,WAGA,QAFjBC,EAAiBF,EAAMG,KAAKb,OAFpC,uBAKIc,QAAQC,IAAI,+HALhB,kBAMWN,EAASO,mBANpB,cASEhB,EAAUY,GATZ,kBAW2Bb,EAAAA,EAAAA,IAAU,kBAXrC,uBAWYK,EAXZ,EAWYA,KAXZ,kBAYWA,GAZX,4FAFuC,yDA2BzC,EANmB,CACjBH,SAAAA,EACAK,OAAAA,EACAD,MAAAA,EACAE,iBAAAA,G,SCxBF,EA9DiB,WACf,IAAMU,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACH,OAAOC,EAAQO,GACjB,IAAK,QACH,OAAOL,EAASK,GAClB,IAAK,WACH,OAAOH,EAAYG,GACrB,QACE,OAEL,EASD,OACE,4BACE,iJAEA,kBAAMC,SAXW,SAAAC,GACnBA,EAAEC,iBACFd,EAASe,EAAAA,SAAwB,CAAEZ,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAChDH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAKiCQ,aAAa,MAA3C,WACE,mDAEE,kBAAOC,KAAK,OAAOd,KAAK,OAAOQ,MAAOR,EAAMe,SAAUT,QAGxD,+DAEE,kBACEQ,KAAK,QACLd,KAAK,QACLQ,MAAON,EACPa,SAAUT,QAId,qEAEE,kBACEQ,KAAK,WACLd,KAAK,WACLQ,MAAOJ,EACPW,SAAUT,QAId,mBAAQQ,KAAK,SAAb,+HAIP,C","sources":["redux/auth/auth-operations.js","pages/Register/Register.js"],"sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n/*\n * POST @ /users/signup\n * body: { name, email, password }\n * После успешной регистрации добавляем токен в HTTP-заголовок\n */\nconst register = createAsyncThunk('auth/register', async credentials => {\n  try {\n    const { data } = await axios.post('/users/signup', credentials);\n    token.set(data.token);\n    return data;\n  } catch (error) {\n    // TODO: Добавить обработку ошибки error.message\n  }\n});\n\n/*\n * POST @ /users/login\n * body: { email, password }\n * После успешного логина добавляем токен в HTTP-заголовок\n */\nconst logIn = createAsyncThunk('auth/login', async credentials => {\n  try {\n    const { data } = await axios.post('/users/login', credentials);\n    token.set(data.token);\n    return data;\n  } catch (error) {\n    // TODO: Добавить обработку ошибки error.message\n  }\n});\n\n/*\n * POST @ /users/logout\n * headers: Authorization: Bearer token\n * После успешного логаута, удаляем токен из HTTP-заголовка\n */\nconst logOut = createAsyncThunk('auth/logout', async () => {\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n  } catch (error) {\n    // TODO: Добавить обработку ошибки error.message\n  }\n});\n/*\n * GET @ /users/current\n * headers:\n *    Authorization: Bearer token\n *\n * 1. Забираем токен из стейта через getState()\n * 2. Если токена нет, выходим не выполняя никаких операций\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\n */\nconst fetchCurrentUser = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState();\n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      console.log('Токена нет, уходим из fetchCurrentUser');\n      return thunkAPI.rejectWithValue();\n    }\n\n    token.set(persistedToken);\n    try {\n      const { data } = await axios.get('/users/current');\n      return data;\n    } catch (error) {\n      // TODO: Добавить обработку ошибки error.message\n    }\n  },\n);\n\nconst operations = {\n  register,\n  logOut,\n  logIn,\n  fetchCurrentUser,\n};\nexport default operations;","\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport authOperations from '../../redux/auth/auth-operations';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n  return (\n    <div>\n      <h1>Страница регистрации</h1>\n\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          Имя\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n        </label>\n\n        <label>\n          Почта\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label>\n          Пароль\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Зарегистрироваться</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["axios","token","register","createAsyncThunk","credentials","data","logIn","logOut","fetchCurrentUser","_","thunkAPI","state","getState","persistedToken","auth","console","log","rejectWithValue","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","onSubmit","e","preventDefault","authOperations","autoComplete","type","onChange"],"sourceRoot":""}
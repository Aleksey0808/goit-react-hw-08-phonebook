{"version":3,"file":"static/js/843.1d3a2953.chunk.js","mappings":"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","sources":["pages/Contacts/Contacts.styles.js","components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","redux/selectors/selectors.js","components/Filter/Filter.jsx","components/ContactListItem/ContactList.styles.jsx","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin: 0 auto;\n  padding: 40px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 32px;\n  font-weight: 700;\n  line-height: 40px;\n  letter-spacing: 0.06em;\n  text-align: start;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const Forma = styled(Form)`\n  margin-bottom: 30px;\n`;\n\nexport const Buttons = styled.button`\n  margin-right: 15px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  width: 250px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 16px;\n  letter-spacing: 0.03em;\n  margin-bottom: 10px;\n`;\n","import { Forma, Label, Text, Buttons } from './ContactForm.styles';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\n\nimport { addContactThunk } from 'redux/operations/contactsThunk';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().positive().required(),\n});\n\nconst ContactForm = () => {\n  const contacts = useSelector(state => state.contacts.items);\n\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    contacts.some(item => item.name.toLowerCase() === values.name.toLowerCase())\n      ? Report.warning(`${values.name}`, 'Such a name already exists!', 'OK')\n      : dispatch(addContactThunk({ ...values }));\n\n    resetForm();\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Forma>\n        <Label htmlFor=\"name\">\n          <Text>Name</Text>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n\n        <Label htmlFor=\"number\">\n          <Text>Phone</Text>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n\n        <Buttons type=\"submit\">Add contact</Buttons>\n      </Forma>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  width: 250px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 16px;\n  letter-spacing: 0.03em;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n\nconst getFilter = state => state.filter;\nconst getContacts = state => state.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(item =>\n      item.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n  }\n);","import React from 'react';\nimport { Label, Text } from './Filter.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from '../../redux/filterSlice';\nimport { selectFilter } from 'redux/selectors/selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter);\n\n  const showFilteredContacts = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <Label>\n      <Text>Find contacts by name </Text>\n      <br />\n      <input\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={showFilteredContacts}\n      />\n    </Label>\n  );\n}\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 36px;\n  letter-spacing: 0.06em;\n  margin-bottom: 5px;\n  width: 350px;\n`;\n\nexport const Button = styled.button`\n  width: 80px;\n  height: 25px;\n  border: 1px solid #000000;\n  border-radius: 5px;\n  background: #ffffff;\n  margin-left: 15px;\n`;\n","import React from 'react';\nimport { Contact, Button } from './ContactList.styles';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContactThunk } from '../../redux/operations/contactsThunk';\nimport { Loader } from '../Loader/Loader';\n\nexport function ContactListItem({ id, name, phone }) {\n  const dispatch = useDispatch();\n  const selectIsLoading = state => state.contacts.isLoading;\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <Contact>\n      {name} - {phone}\n      <Button onClick={() => dispatch(deleteContactThunk(id))}>\n        {isLoading ? <Loader /> : 'Delete'}\n      </Button>\n    </Contact>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/selectors/selectors';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\n\nfunction ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n\n  return (\n    <ul>\n      {contacts.map(contacts => (\n        <ContactListItem key={contacts.id} {...contacts} />\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import { Container, Title } from './Contacts.styles';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\n\nconst Contacts = () => {\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <Title>Contacts</Title>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Container","styled","Title","Forma","Form","Buttons","Label","Text","schema","yup","shape","name","required","number","positive","contacts","useSelector","state","items","dispatch","useDispatch","initialValues","onSubmit","values","resetForm","some","item","toLowerCase","Report","addContactThunk","validationSchema","htmlFor","type","pattern","title","component","selectFilter","filter","getFilteredContacts","createSelector","trim","includes","value","onChange","e","filterContacts","target","Contact","Button","ContactListItem","id","phone","isLoading","onClick","deleteContactThunk","Loader","map"],"sourceRoot":""}